ggplot(data, aes(x = Date, y = investment_value)) +
geom_line(color = "blue") +
labs(title = "Tesla Stock Price", x = "Date", y = "Investment Value (USD)")
} else {
ggplot(data, aes(x = date, y = investment_value)) +
geom_line(color = "red") +
labs(title = "Tesla Roadster Value", x = "Date", y = "Depreciation Value (USD)")
}
}
})
# Render Summary Text
output$summaryText <- renderText({
data <- filtered_data()
# Display appropriate text based on the investment type
if (is.null(data)) {
return("No data available for the selected date range.")
}
if (input$investment_type == "stock") {
return("Tesla stock has seen exponential growth over the years, providing significant returns.")
} else {
return("The Tesla Roadster has followed a typical depreciation curve, losing most of its value by 2024.")
}
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
ggplot() +
geom_line(data = tesla_stock, aes(x = Date, y = investment_value), color = "blue") +
geom_line(data = roadster_value, aes(x = date, y = investment_value), color = "red") +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value")
# Inspect the Date column to determine its format
head(tesla_stock$Date)
tesla_stock$Date <- as.Date(tesla_stock$Date)
# Add an investment_value column (assuming initial investment)
tesla_stock$investment_value <- tesla_stock$Adj_Close * 28385  # Assuming initial investment
# Save the filtered Tesla stock data into the package
usethis::use_data(filtered_tesla_stock, overwrite = TRUE)
# Prepare Tesla Roadster depreciation data
roadster_value <- data.frame(
date = seq(as.Date("2010-01-01"), as.Date("2024-12-31"), by = "year"),
investment_value = c(109000, 87200, 78480, 70632, 63569, 60391, 57371, 54502, 51777, 49188, 46729, 44400, 42180, 40071, 38067)
)
# Filter Tesla Roadster data within a specific date range (for example: 2015-01-01 to 2020-12-31)
filtered_roadster_value <- roadster_value %>%
filter(date >= as.Date("2015-01-01") & date <= as.Date("2020-12-31"))
# Save the filtered Tesla Roadster depreciation data into the package
usethis::use_data(filtered_roadster_value, overwrite = TRUE)
library(ggplot2)
ggplot() +
geom_line(data = tesla_stock, aes(x = Date, y = investment_value), color = "blue") +
geom_line(data = roadster_value, aes(x = date, y = investment_value), color = "red") +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value")
View(tesla_stock)
# Inspect the Date column to determine its format
head(tesla_stock$Date)
# Load the tesla_stock data
load("path/to/tesla_stock.rda")  # Replace with the correct path
library(dplyr)
# Load the tesla_stock data
load("data-raw//TSLA.csv")  # Replace with the correct path
# Inspect the Date column to determine its format
head(tesla_stock$Date)
# Ensure the date column is in Date format (adjust format string as needed)
tesla_stock$date <- as.Date(tesla_stock$Date, format = "%Y-%m-%d")  # Change format if needed
# Add an investment_value column (assuming initial investment)
tesla_stock$investment_value <- tesla_stock$Adj_Close * 28385  # Assuming initial investment
# Filter Tesla stock data within a specific date range (for example: 2011-01-01 to 2023-12-31)
filtered_tesla_stock <- tesla_stock %>%
filter(date >= as.Date("2011-01-01") & date <= as.Date("2023-12-31"))
# Save the filtered Tesla stock data into the package
usethis::use_data(filtered_tesla_stock, overwrite = TRUE)
# Prepare Tesla Roadster depreciation data
roadster_value <- data.frame(
date = seq(as.Date("2010-01-01"), as.Date("2024-12-31"), by = "year"),
investment_value = c(109000, 87200, 78480, 70632, 63569, 60391, 57371, 54502, 51777, 49188, 46729, 44400, 42180, 40071, 38067)
)
# Filter Tesla Roadster data within a specific date range (for example: 2015-01-01 to 2020-12-31)
filtered_roadster_value <- roadster_value %>%
filter(date >= as.Date("2015-01-01") & date <= as.Date("2020-12-31"))
# Save the filtered Tesla Roadster depreciation data into the package
usethis::use_data(filtered_roadster_value, overwrite = TRUE)
library(ggplot2)
ggplot() +
geom_line(data = tesla_stock, aes(x = Date, y = investment_value), color = "blue") +
geom_line(data = roadster_value, aes(x = date, y = investment_value), color = "red") +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value")
library(dplyr)
# Load the tesla_stock data
load("data-raw//TSLA.csv")  # Replace with the correct path
# Inspect the Date column to determine its format
head(tesla_stock$Date)
# Load necessary libraries
library(dplyr)
library(usethis)
# Load the Tesla stock data from the CSV file
tesla_stock <- read.csv("data-raw//TSLA.csv")
View(tesla_stock)
# Convert the Date column to Date format (DD/MM/YY)
tesla_stock$Date <- as.Date(tesla_stock$Date, format = "%d/%m/%y")
library(ggplot2)
ggplot() +
geom_line(data = tesla_stock, aes(x = Date, y = investment_value), color = "blue") +
geom_line(data = roadster_value, aes(x = date, y = investment_value), color = "red") +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value")
# Inspect the data to ensure Date conversion is correct
head(tesla_stock)
# Add an investment_value column (assuming an initial investment in 28385 shares)
tesla_stock$investment_value <- tesla_stock$Adj_Close * 28385  # Assuming an initial investment
library(ggplot2)
ggplot() +
geom_line(data = tesla_stock, aes(x = Date, y = investment_value), color = "blue") +
geom_line(data = roadster_value, aes(x = date, y = investment_value), color = "red") +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming tesla_stock and roadster_value are already loaded
# Add an identifier to each dataset
tesla_stock <- tesla_stock %>%
mutate(type = "Tesla Stock")
roadster_value <- roadster_value %>%
mutate(type = "Tesla Roadster")
# Combine the two datasets into one
combined_data <- bind_rows(
tesla_stock %>% select(Date, investment_value, type),
roadster_value %>% rename(Date = date) %>% select(Date, investment_value, type)
)
# Plot with facets
ggplot(combined_data, aes(x = Date, y = investment_value, color = type)) +
geom_line() +
labs(title = "Comparison of Tesla Stock and Roadster Depreciation",
x = "Date", y = "Value") +
facet_wrap(~type, scales = "free_y") +  # Facet by the type (Tesla Stock and Tesla Roadster)
theme_minimal()
# Filter Tesla stock data within a specific date range (for example: 2011-01-01 to 2023-12-31)
filtered_tesla_stock <- tesla_stock %>%
filter(Date >= as.Date("2011-01-01") & Date <= as.Date("2023-12-31"))
# Save the filtered Tesla stock data into the package
usethis::use_data(filtered_tesla_stock, overwrite = TRUE)
# Save the filtered Tesla stock data into the package
usethis::use_data(filtered_tesla_stock, overwrite = TRUE)
# Prepare Tesla Roadster depreciation data
roadster_value <- data.frame(
date = seq(as.Date("2010-01-01"), as.Date("2024-12-31"), by = "year"),
investment_value = c(109000, 87200, 78480, 70632, 63569, 60391, 57371, 54502, 51777, 49188, 46729, 44400, 42180, 40071, 38067)
)
# Filter Tesla Roadster data within a specific date range (for example: 2015-01-01 to 2020-12-31)
filtered_roadster_value <- roadster_value %>%
filter(date >= as.Date("2015-01-01") & date <= as.Date("2020-12-31"))
# Save the filtered Tesla Roadster depreciation data into the package
usethis::use_data(filtered_roadster_value, overwrite = TRUE)
library(shiny)
library(ggplot2)
library(TeslaInvestR)  # Load your package
# Load data directly from the package
tesla_stock <- TeslaInvestR::tesla_stock
roadster_value <- TeslaInvestR::roadster_value
ui <- fluidPage(
titlePanel("Tesla Stock vs. Tesla Roadster: Investment Comparison"),
sidebarLayout(
sidebarPanel(
# Input for Date Range
dateRangeInput("dateRange", "Select Date Range:", start = min(tesla_stock$Date), end = max(tesla_stock$Date)),
# Radio button to choose investment type
radioButtons("investment_type", "Choose Investment Type:",
choices = c("Tesla Stock" = "stock", "Tesla Roadster" = "roadster"))
),
mainPanel(
# Output for plot
plotOutput("investmentPlot"),
# Output for summary text
textOutput("summaryText")
)
)
)
server <- function(input, output) {
# Filtered data based on input
filtered_data <- reactive({
if (input$investment_type == "stock") {
data <- tesla_stock
} else {
data <- roadster_value
}
# Check if the date range is valid and return the filtered data
filtered <- data[data$date >= input$dateRange[1] & data$date <= input$dateRange[2], ]
# Return the filtered data or a message if no data is available
if (nrow(filtered) == 0) {
return(NULL)  # No data available
}
return(filtered)
})
# Render Plot
output$investmentPlot <- renderPlot({
data <- filtered_data()
# Check if there is data to plot
if (is.null(data)) {
ggplot() +
labs(title = "No data available for the selected date range.") +
theme_void()
} else {
if (input$investment_type == "stock") {
ggplot(data, aes(x = Date, y = investment_value)) +
geom_line(color = "blue") +
labs(title = "Tesla Stock Price", x = "Date", y = "Investment Value (USD)")
} else {
ggplot(data, aes(x = date, y = investment_value)) +
geom_line(color = "red") +
labs(title = "Tesla Roadster Value", x = "Date", y = "Depreciation Value (USD)")
}
}
})
# Render Summary Text
output$summaryText <- renderText({
data <- filtered_data()
# Display appropriate text based on the investment type
if (is.null(data)) {
return("No data available for the selected date range.")
}
if (input$investment_type == "stock") {
return("Tesla stock has seen exponential growth over the years, providing significant returns.")
} else {
return("The Tesla Roadster has followed a typical depreciation curve, losing most of its value by 2024.")
}
})
}
shinyApp(ui = ui, server = server)
# Load data directly from the package
tesla_stock <- TeslaInvestR::filtered_tesla_stock
roadster_value <- TeslaInvestR::filtered_roadster_value
devtools::document()
devtools::install()
# Load data directly from the package
tesla_stock <- TeslaInvestR::filtered_tesla_stock
roadster_value <- TeslaInvestR::filtered_roadster_value
View(filtered_tesla_stock)
View(filtered_roadster_value)
View(filtered_tesla_stock)
View(filtered_roadster_value)
# Load the Tesla stock data from the CSV file
tesla_stock <- read.csv("data-raw//TSLA.csv")
# Convert the Date column to Date format (DD/MM/YY)
tesla_stock$Date <- as.Date(tesla_stock$Date, format = "%d/%m/%y")
# Inspect the data to ensure Date conversion is correct
head(tesla_stock)
# Add an investment_value column (assuming an initial investment in 28385 shares)
tesla_stock$investment_value <- tesla_stock$Adj_Close * 28385  # Assuming an initial investment
# Filter Tesla stock data within a specific date range (for example: 2011-01-01 to 2023-12-31)
filtered_tesla_stock <- tesla_stock %>%
filter(Date >= as.Date("2011-01-01") & Date <= as.Date("2023-12-31"))
# Save the filtered Tesla stock data into the package
usethis::use_data(filtered_tesla_stock, overwrite = TRUE)
# Prepare Tesla Roadster depreciation data
roadster_value <- data.frame(
date = seq(as.Date("2010-01-01"), as.Date("2024-12-31"), by = "year"),
investment_value = c(109000, 87200, 78480, 70632, 63569, 60391, 57371, 54502, 51777, 49188, 46729, 44400, 42180, 40071, 38067)
)
# Filter Tesla Roadster data within a specific date range (for example: 2015-01-01 to 2020-12-31)
filtered_roadster_value <- roadster_value %>%
filter(date >= as.Date("2010-01-01") & date <= as.Date("2024-12-31"))
# Save the filtered Tesla Roadster depreciation data into the package
usethis::use_data(filtered_roadster_value, overwrite = TRUE)
View(filtered_roadster_value)
View(filtered_tesla_stock)
View(filtered_roadster_value)
roadster_value <- TeslaInvestR::filtered_roadster_value
ui <- fluidPage(
titlePanel("Tesla Stock vs. Tesla Roadster: Investment Comparison"),
sidebarLayout(
sidebarPanel(
# Input for Date Range
dateRangeInput("dateRange", "Select Date Range:", start = min(tesla_stock$Date), end = max(tesla_stock$Date)),
# Radio button to choose investment type
radioButtons("investment_type", "Choose Investment Type:",
choices = c("Tesla Stock" = "stock", "Tesla Roadster" = "roadster"))
),
mainPanel(
# Output for plot
plotOutput("investmentPlot"),
# Output for summary text
textOutput("summaryText")
)
)
)
server <- function(input, output) {
# Filtered data based on input
filtered_data <- reactive({
if (input$investment_type == "stock") {
data <- tesla_stock
} else {
data <- roadster_value
}
# Check if the date range is valid and return the filtered data
filtered <- data[data$date >= input$dateRange[1] & data$date <= input$dateRange[2], ]
# Return the filtered data or a message if no data is available
if (nrow(filtered) == 0) {
return(NULL)  # No data available
}
return(filtered)
})
# Render Plot
output$investmentPlot <- renderPlot({
data <- filtered_data()
# Check if there is data to plot
if (is.null(data)) {
ggplot() +
labs(title = "No data available for the selected date range.") +
theme_void()
} else {
if (input$investment_type == "stock") {
ggplot(data, aes(x = Date, y = investment_value)) +
geom_line(color = "blue") +
labs(title = "Tesla Stock Price", x = "Date", y = "Investment Value (USD)")
} else {
ggplot(data, aes(x = date, y = investment_value)) +
geom_line(color = "red") +
labs(title = "Tesla Roadster Value", x = "Date", y = "Depreciation Value (USD)")
}
}
})
# Render Summary Text
output$summaryText <- renderText({
data <- filtered_data()
# Display appropriate text based on the investment type
if (is.null(data)) {
return("No data available for the selected date range.")
}
if (input$investment_type == "stock") {
return("Tesla stock has seen exponential growth over the years, providing significant returns.")
} else {
return("The Tesla Roadster has followed a typical depreciation curve, losing most of its value by 2024.")
}
})
}
shinyApp(ui = ui, server = server)
# Load data directly from the package
tesla_stock <- TeslaInvestR::filtered_tesla_stock
tesla_stock <- TeslaInvestR::filtered_tesla_stock
tesla_stock <- TeslaInvestR::filtered_tesla_stock
roadster_value <- TeslaInvestR::filtered_roadster_value
View(filtered_tesla_stock)
View(filtered_roadster_value)
View(filtered_tesla_stock)
library(shiny)
library(ggplot2)
library(TeslaInvestR)  # Load your package
# Load data directly from the package
tesla_stock <- TeslaInvestR::filtered_tesla_stock
roadster_value <- TeslaInvestR::filtered_roadster_value
# Ensure date columns are in Date format
tesla_stock$Date <- as.Date(tesla_stock$Date)
roadster_value$date <- as.Date(roadster_value$date)
ui <- fluidPage(
titlePanel("Tesla Stock vs. Tesla Roadster: Investment Comparison"),
sidebarLayout(
sidebarPanel(
# Input for Date Range
dateRangeInput("dateRange", "Select Date Range:",
start = min(tesla_stock$Date),
end = max(tesla_stock$Date)),
# Radio button to choose investment type
radioButtons("investment_type", "Choose Investment Type:",
choices = c("Tesla Stock" = "stock", "Tesla Roadster" = "roadster"))
),
mainPanel(
# Output for plot
plotOutput("investmentPlot"),
# Output for summary text
textOutput("summaryText")
)
)
)
server <- function(input, output) {
# Filtered data based on input
filtered_data <- reactive({
if (input$investment_type == "stock") {
data <- tesla_stock
date_col <- "Date"  # Use "Date" column for tesla_stock
} else {
data <- roadster_value
date_col <- "date"  # Use "date" column for roadster_value
}
# Filter data based on date range
filtered <- data[data[[date_col]] >= input$dateRange[1] & data[[date_col]] <= input$dateRange[2], ]
# Return filtered data or NULL if no data is available
if (nrow(filtered) == 0) {
return(NULL)
}
return(filtered)
})
# Render Plot
output$investmentPlot <- renderPlot({
data <- filtered_data()
# Check if there is data to plot
if (is.null(data)) {
ggplot() +
labs(title = "No data available for the selected date range.") +
theme_void()
} else {
ggplot(data, aes_string(x = if (input$investment_type == "stock") "Date" else "date",
y = "investment_value")) +
geom_line(color = if (input$investment_type == "stock") "blue" else "red") +
labs(title = paste(input$investment_type == "stock" ? "Tesla Stock Price" : "Tesla Roadster Value"),
x = "Date", y = "Investment/Depreciation Value (USD)")
}
})
# Render Summary Text
output$summaryText <- renderText({
data <- filtered_data()
# Display appropriate text based on the investment type
if (is.null(data)) {
return("No data available for the selected date range.")
}
if (input$investment_type == "stock") {
return("Tesla stock has seen exponential growth over the years, providing significant returns.")
} else {
return("The Tesla Roadster has followed a typical depreciation curve, losing most of its value by 2024.")
}
})
}
shinyApp(ui = ui, server = server)
#' @param session Shiny session object (optional).
#'
#' @return None. The function renders outputs directly to the Shiny UI.
#'
#' @examples
#' \dontrun{
#' shinyApp(ui = ui, server = server)
#' }
#'
#' @export
server <- function(input, output) {
# Server logic here...
}
#' @param session Shiny session object (optional).
#'
#' @return None. The function renders outputs directly to the Shiny UI.
#'
#' @examples
#' \dontrun{
#' shinyApp(ui = ui, server = server)
#' }
#'
#' @export
server <- function(input, output) {
# Server logic here...
}
#'   \item{investment_value}{The investment value calculated based on an initial investment.}
#' }
#'
#' @source Yahoo Finance
#'
#' @examples
#' data(filtered_tesla_stock)
#' head(filtered_tesla_stock)
#'
#' @export
"filtered_tesla_stock"
#' \describe{
#'   \item{date}{The year of depreciation in \code{Date} format.}
#'   \item{investment_value}{The depreciation value of the Tesla Roadster in USD.}
#' }
#'
#' @examples
#' data(filtered_roadster_value)
#' head(filtered_roadster_value)
#'
#' @export
"filtered_roadster_value"
#' @param session Shiny session object (optional).
#'
#' @return None. The function renders outputs directly to the Shiny UI.
#'
#' @examples
#' \dontrun{
#' shinyApp(ui = ui, server = server)
#' }
#'
#' @export
server <- function(input, output) {
# Server logic here...
}
#'   \item{investment_value}{The investment value calculated based on an initial investment.}
#' }
#'
#' @source Yahoo Finance
#'
#' @examples
#' data(filtered_tesla_stock)
#' head(filtered_tesla_stock)
#'
#' @export
"filtered_tesla_stock"
#' \describe{
#'   \item{date}{The year of depreciation in \code{Date} format.}
#'   \item{investment_value}{The depreciation value of the Tesla Roadster in USD.}
#' }
#'
#' @examples
#' data(filtered_roadster_value)
#' head(filtered_roadster_value)
#'
#' @export
"filtered_roadster_value"
devtools::document()
devtools::install()  # Install the package with updated documentation
?TeslaInvestR::filtered_tesla_stock
?TeslaInvestR::server
